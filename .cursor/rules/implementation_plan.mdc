---
description: Apply these rules when making changes to the project
globs: 
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Implementation plan

## Phase 1: Environment Setup

1. **Step 1:** Set up a local WordPress environment (using a standard WordPress installation) and verify the installation is running. (Project Requirements: Constraints & Assumptions)

2. **Step 2:** Create a new plugin folder at `/wp-content/plugins/manage-comments`. (Project Requirements: Platform)

3. **Step 3:** In the plugin folder, create the main plugin file `/wp-content/plugins/manage-comments/manage-comments.php` and add the proper plugin header (e.g., Plugin Name, Description, Author). (Project Requirements: Core Features)

4. **Step 4:** **Validation:** Activate the plugin from the WordPress Dashboard → Plugins to confirm it appears in the plugins list.

## Phase 2: Frontend Development

5. **Step 5:** Register an admin menu in the main plugin file using `add_menu_page()` so that administrators can access the plugin's control panel. (Project Requirements: Admin Panel Interface)

6. **Step 6:** Create an admin panel page file at `/wp-content/plugins/manage-comments/admin-page.php` that renders controls for the core features: Spam Comment Deletion, Complete Comment Deletion with backup, and Disable Comments. (Project Requirements: Main Control Panel and Core Features)

7. **Step 7:** Develop a custom stylesheet for the admin panel. Create `/wp-content/plugins/manage-comments/css/admin-style.css` and enqueue it to maintain consistency with WordPress admin UI. (Project Requirements: UI)

8. **Step 8:** Implement confirmation dialogs and additional interactivity using JavaScript. Create `/wp-content/plugins/manage-comments/js/admin-scripts.js` to handle confirmation prompts before destructive actions. (Project Requirements: Confirmation & Backup)

9. **Step 9:** **Validation:** Load the admin panel in the WordPress dashboard and ensure that the three buttons display correctly and confirmation dialogs trigger on button clicks.

## Phase 3: Backend Development

10. **Step 10:** In `/wp-content/plugins/manage-comments/functions.php`, implement a PHP function to delete all spam comments. Use `$wpdb` to execute database operations that remove comments marked as spam. (Project Requirements: Spam Comment Deletion)

11. **Step 11:** In the same functions file, implement a PHP function to back up all comments by exporting them (e.g., in CSV format) and then delete all comments. This function should include a confirmation step and offer a CSV download backup. (Project Requirements: Complete Comment Deletion with Confirmation & Backup)

12. **Step 12:** Implementiere eine Funktion zum Deaktivieren oder Aktivieren von Kommentaren site-weit. Erweitere die Funktionalität um:
    - Deaktivierung der Kommentar-REST-API-Endpunkte
    - Entfernung von Kommentar-Links aus Post-Meta
    - Deaktivierung von Kommentar-Widgets
    - Entfernung der Kommentar-Unterstützung für alle Post-Types
    - Zusätzliche Filter zum Ausblenden des Kommentarbereichs
    - Entfernung von Theme-spezifischen Kommentar-Styles
    - Entfernung von Kommentar-bezogenen Gutenberg-Blöcken
    - Erstellung eines leeren Kommentar-Templates

13. **Step 13:** **Validation:** Überprüfe die vollständige Deaktivierung der Kommentare durch:
    - Kontrolle der Datenbank-Einstellungen
    - Überprüfung der Frontend-Anzeige
    - Test der REST-API-Endpunkte
    - Kontrolle der Gutenberg-Editor-Blöcke
    - Überprüfung der Theme-Integration

## Phase 4: Integration

14. **Step 14:** Integrate the admin panel UI with the backend functions by linking each button on the admin page to its corresponding PHP function (using AJAX or form submissions). (Project Requirements: Execution & Post-Operation)

15. **Step 15:** Ensure security by checking `current_user_can('manage_options')` within each backend function to restrict access to administrators. (Project Requirements: User Roles & Security)

16. **Step 16:** Add nonce checks in the form submissions or AJAX calls using WordPress nonce functions to protect against CSRF. (Project Requirements: Security & Confirmation)

17. **Step 17:** **Validation:** Execute actions from the admin panel and inspect the database to ensure that only administrators can perform actions. Confirm that non-authorized access is blocked.

## Phase 5: Deployment

18. **Step 18:** Package the plugin by compressing the `/manage-comments` directory into a ZIP file that contains all plugin files (PHP, CSS, JS, README, etc.). (Project Requirements: Deployment Constraints)

19. **Step 19:** Create a README file at `/wp-content/plugins/manage-comments/README.md` with detailed installation and usage instructions for site administrators. (Project Requirements: Usability)

20. **Step 20:** **Validation:** Install the ZIP archive on a separate local WordPress installation via the WordPress admin interface and verify that the plugin installs correctly, activates, and functions as expected.
