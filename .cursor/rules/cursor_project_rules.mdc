---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
## Project Overview

*   **Type:** WordPress Plugin
*   **Description:** A plugin designed to manage website comments in WordPress by allowing administrators to delete spam comments, delete all comments with backup functionality, and toggle comments on or off globally.
*   **Primary Goal:** Create a WordPress plugin that enables administrators to easily manage comments with emphasis on security, data integrity, and performance.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   Since this is a WordPress plugin, traditional routing patterns (e.g., Next.js App Router or React Router) do not apply. Instead, follow the standard WordPress Plugin file structure with an entry-point file and organized admin folders.
    *   Example: The main plugin file (e.g., `comments-manager.php`) in the root with additional subdirectories for admin UI, assets, and includes.

### Core Directories

*   **Versioned Structure:**

    *   `admin/`: Contains WordPress dashboard integration files (e.g., pages for deleting or disabling comments)
    *   `includes/`: Core functionality and helper classes/functions written in PHP
    *   `assets/`: Frontend resources such as JavaScript, CSS, and image files for the admin interface
    *   Example: `admin/settings.php` – manages settings and configuration pages

### Key Files

*   **Stack-Versioned Patterns:**

    *   `comments-manager.php`: Main plugin file that registers hooks, loads dependencies, and provides the plugin metadata
    *   `admin/dashboard.php`: Implements the admin panel UI and integrates three primary controls: Delete Spam Comments, Delete All Comments (with confirmation and backup), and Disable/Enable Comments

## Tech Stack Rules

*   **Version Enforcement:**

    *   PHP (7.4+ recommended): Adhere to modern PHP standards and follow WordPress Coding Standards
    *   WordPress (latest stable release): Ensure compatibility with current WordPress core features and admin UI conventions
    *   JavaScript/CSS: Use enqueue scripts/styles via WordPress functions (e.g., wp_enqueue_script, wp_enqueue_style) for asset management

## PRD Compliance

*   **Non-Negotiable:**

    *   "Before any destructive action, a confirmation prompt must be displayed along with an option for backup download." This requirement enforces data safety and prevents accidental deletion of important user data.

*   **Security Requirements:** Only administrators can access the plugin’s functions. The plugin must adhere to WordPress security best practices.

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   WordPress Admin UI Integration → The plugin adds a menu item to the WordPress dashboard that navigates to a custom admin page with controls for comment management.
    *   Example: The admin page located at `admin/dashboard.php` offers the three main features and handles backend processes for deleting and toggling comments.

## Best Practices

*   **WordPress & PHP**

    *   Follow the WordPress Coding Standards for PHP to ensure readability and maintainability.
    *   Sanitize and validate all inputs and outputs to protect against security vulnerabilities.
    *   Use nonces and capability checks (e.g., current_user_can) to secure form submissions and AJAX requests.
    *   Ensure code compatibility with the latest WordPress core and PHP versions.

*   **JavaScript & CSS**

    *   Enqueue scripts and styles correctly using WordPress functions to prevent conflicts.
    *   Use localization for strings to support internationalization (English and German initially, with scalability for more languages).
    *   Optimize asset loading to improve performance on the admin interface.

## Rules

*   Derive folder/file patterns directly from WordPress plugin development best practices and standards.
*   The main plugin file should be placed in the root directory, with subdirectories for admin interfaces, core functionalities, and assets.
*   Enforce administrator-only access for all plugin functions using WordPress capability checks.
*   Strictly adhere to WordPress.org plugin directory guidelines and security protocols.
*   Never incorporate features that are explicitly out-of-scope, such as multisite support, custom spam identification, or scheduled/automated deletion.
